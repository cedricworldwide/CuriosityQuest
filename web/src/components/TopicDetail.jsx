import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext.jsx';
import { useTranslation } from '../contexts/TranslationContext.jsx';

/**
 * TopicDetail displays the full description of a selected topic and
 * provides a button to explore deeper prompts generated by the
 * backend. Users earn points (and potentially badges) for each
 * exploration. If the user is not authenticated they are prompted
 * to log in.
 */
export default function TopicDetail() {
  const { id } = useParams();
  const { user, token, rewardUser } = useAuth();
  const { t, lang } = useTranslation();
  const [topic, setTopic] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [deeperPrompt, setDeeperPrompt] = useState(null);
  const [exploreLoading, setExploreLoading] = useState(false);
  const [rewardMessage, setRewardMessage] = useState(null);

  useEffect(() => {
    async function fetchTopic() {
      try {
        const res = await axios.get(
          `${import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001'}/api/topics/${id}`
        );
        setTopic(res.data.topic);
      } catch (err) {
        console.error(err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    }
    fetchTopic();
  }, [id]);

  async function handleExplore() {
    if (!user || !token) return;
    setExploreLoading(true);
    setRewardMessage(null);
    try {
      const res = await axios.get(
        `${import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001'}/api/ai/generate`,
        {
          params: { topicId: id, lang },
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      setDeeperPrompt(res.data.prompt);
      // Award 10 points for exploring
      const rewardRes = await rewardUser({ points: 10 });
      // Assign a simple badge when reaching certain thresholds
      if (rewardRes.points >= 50 && !rewardRes.badges.includes('Curious Explorer')) {
        await rewardUser({ badge: 'Curious Explorer' });
        setRewardMessage('ðŸŽ‰ You earned the Curious Explorer badge!');
      } else {
        setRewardMessage(`+10 ${t('points')}!`);
      }
    } catch (err) {
      console.error(err);
      setError('Failed to load deeper content');
    } finally {
      setExploreLoading(false);
    }
  }

  if (loading) {
    return <p className="text-center mt-8">{t('loading')}</p>;
  }
  if (error) {
    return <p className="text-center mt-8 text-red-600">{error}</p>;
  }
  if (!topic) {
    return null;
  }
  const title = lang === 'zh' ? topic.title_zh : topic.title_en;
  const description = lang === 'zh' ? topic.description_zh : topic.description_en;

  return (
    <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
      <h1 className="text-2xl font-bold mb-2">{title}</h1>
      <p className="text-gray-700 mb-4">{description}</p>
      {!user ? (
        <div className="bg-yellow-100 border-l-4 border-yellow-400 p-4 rounded mb-4">
          <p className="text-yellow-800">{t('loginToExplore')}</p>
        </div>
      ) : (
        <button
          onClick={handleExplore}
          disabled={exploreLoading}
          className="px-4 py-2 bg-primary text-white rounded hover:bg-primary-dark disabled:opacity-50"
        >
          {exploreLoading ? `${t('loading')}` : t('exploreMore')}
        </button>
      )}
      {rewardMessage && (
        <p className="mt-3 text-green-600">{rewardMessage}</p>
      )}
      {deeperPrompt && (
        <div className="mt-6 p-4 border-l-4 border-secondary bg-secondary-light rounded">
          <h3 className="font-semibold text-secondary-dark mb-2">{t('deeperPrompt')}</h3>
          <p className="text-gray-800">{deeperPrompt}</p>
        </div>
      )}
    </div>
  );
}